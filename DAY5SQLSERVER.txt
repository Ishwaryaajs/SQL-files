USE [lms_db]

--INNER JOIN RETRIEVES THE DATA/COLUMN WHICH ARE COMMON IN MULTIPLE TABLES----
--OUTER JOIN
----LEFT,RIGHT,FULL OUTER JOINS
--RIGHT OUTER JOIN IS A METHOD OF COMBINING TABLES.THE RESULT INCLUDES UNMATCHED ROWS FROM ONLY THE TABLE 
--THAT IS SPECIFIED AFTER THE RIGHT OUTER JOIN CLAUSE.

SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM LMS_BOOK_DETAILS AS L1 JOIN LMS_SUPPLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID=L2.SUPPLIER_ID;

SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM LMS_BOOK_DETAILS AS L1 RIGHT OUTER JOIN LMS_SUPPLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID=L2.SUPPLIER_ID;

SELECT L2.MEMBER_ID,L2.MEMBER_NAME,L1.BOOK_CODE FROM
LMS_BOOK_ISSUE AS L1 RIGHT JOIN LMS_MEMBERS AS L2
ON L1.MEMBER_ID=L2.MEMBER_ID;

--LEFT OUTER JOIN
SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM LMS_BOOK_DETAILS AS L1 
LEFT OUTER JOIN LMS_SUPPLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID=L2.SUPPLIER_ID;

--FULL OUTER JOIN
SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM LMS_BOOK_DETAILS AS L1 
FULL OUTER JOIN LMS_SUPPLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID=L2.SUPPLIER_ID;

--DISPLAY BOOK CODE,BOOK TITLE,SUPPLIER NAME AND SUPPLIER ID WHERE THE SUPPLIER NAME STARTS WITH 'S'.

SELECT L1.BOOK_CODE,L1.BOOK_TITLE,L2.SUPPLIER_NAME,L2.SUPPLIER_ID FROM LMS_BOOK_DETAILS AS L1 
FULL OUTER JOIN LMS_SUPPLIERS_DETAILS AS L2
ON L1.SUPPLIER_ID=L2.SUPPLIER_ID WHERE L2.SUPPLIER_NAME LIKE 'S%';

--HAVING CLAUSE
--FIND THE SUPPLIER DETAILS WHO HAS SUPPLIED MAXIMUM NUMBER OF BOOKS

SELECT * FROM LMS_SUPPLIERS_DETAILS;
SELECT * FROM LMS_BOOK_DETAILS;

SELECT COUNT(SUPPLIER_ID) AS MAXSUPPLIEDBOOKS FROM LMS_BOOK_DETAILS GROUP BY SUPPLIER_ID
HAVING COUNT(SUPPLIER_ID)  >=ALL(
SELECT COUNT(SUPPLIER_ID) FROM LMS_BOOK_DETAILS GROUP BY SUPPLIER_ID);

--subquery answer
--4
--3
--1

--all(4,3,1)
--(0,4,3,1)>=ALL(0,4,3,1)

--0>=ALL(0,4,3,1)
--4>=ALL(0,4,3,1)----WILL GIVE TRUE FOR ALL THE COMPARSIONS
--3>=ALL(0,4,3,1)
--1>=ALL(0,4,3,1)

--DISPLAY THE SUPPLIER ID AND NO OF SUPPLIERS WHO HAVING MORE THAN 2 SUPPLIER ID

SELECT SUPPLIER_ID,COUNT(SUPPLIER_ID) AS NOOFSUPPLIERS FROM LMS_BOOK_DETAILS
GROUP BY SUPPLIER_ID HAVING COUNT(SUPPLIER_ID)>2;

--DISPLAY THE MEMBER NAME AND TOTAL NO OF BOOKS
--AND THE MEMBER NAME STARTS WITH A HAVING THE BOOK COUNT LESS THAN 2 AND 
--ORDER BY MEMBER NAMBER WHICH WAS SORTED ON ASCENDING ORDER.

SELECT MEMBER_NAME,COUNT(BOOK_CODE) FROM LMS_BOOK_ISSUE AS L1 JOIN LMS_MEMBERS AS L2 
ON L1.MEMBER_ID=L2.MEMBER_ID  
WHERE MEMBER_NAME LIKE 'A%' GROUP BY MEMBER_NAME HAVING COUNT(BOOK_CODE)<2 ORDER BY MEMBER_NAME ASC;


--17-write a query to display member_id,member_name,city,member status of members with the total fine paid by them with alias name 'Fine'.

select  L3.MEMBER_ID,L3.MEMBER_NAME,L3.CITY,L3.MEMBERSHIP_STATUS,SUM(L2.FINE_AMOUNT) AS 'Fine' FROM LMS_BOOK_ISSUE AS L1 
JOIN LMS_FINE_DETAILS AS L2 ON L1.FINE_RANGE=L2.FINE_RANGE JOIN LMS_MEMBERS AS L3 ON L3.MEMBER_ID=L1.MEMBER_ID;

--1-write a query to display the member_ID ,member name of the members,book code and book title of the books taken by them.

SELECT L3.MEMBER_ID,L3.MEMBER_NAME,L1.BOOK_CODE,L1.BOOK_TITLE FROM LMS_BOOK_DETAILS AS L1 JOIN LMS_BOOK_ISSUE AS L2
ON L1.BOOK_CODE=L2.BOOK_CODE 
JOIN LMS_MEMBERS AS L3 ON L3.MEMBER_ID=L2.MEMBER_ID;

--3-WRITE A QUERY TO DISPLAY THE MEMBER_ID,MEMBER_NAME,FINE_RANGE AND FINE_AMLOUNT OF THE MEMBERS WHOSE FINE AMOUNT IS LESS THAN 100
SELECT L3.MEMBER_ID,L3.MEMBER_NAME,L1.FINE_RANGE,L1.FINE_AMOUNT FROM LMS_FINE_DETAILS AS L1 JOIN LMS_BOOK_ISSUE AS L2
ON L1.FINE_RANGE=L2.FINE_RANGE JOIN LMS_MEMBERS AS L3 ON L3.MEMBER_ID=L2.MEMBER_ID AND L1.FINE_AMOUNT<100;

--4-WRITE A QUERY TO DISPLAY THE BOOK CODE,BOOK TITLE,PUBLISHER,EDITION,PRICE,YEAR OF PUBLICATION AND SORT BASED ON
--YEAR OF PUBLICATION,PUBLISHER,EDITION.

SELECT DISTINCT BOOK_CODE,BOOK_TITLE,PUBLICATION,BOOK_EDITION,PRICE,PUBLISH_DATE FROM LMS_BOOK_DETAILS 
ORDER BY PUBLICATION,PUBLISH_DATE,BOOK_EDITION ASC;

--5-WRITE A QUERY TO DISPLAY THE BOOK CODE,BOOK TITLE,RACK NUMBER OF BOOKS WHICH ARE PLACED IN RACK 'A1'
--SORT BY BOOK TITLE IN ASCENDING ORDER.

SELECT BOOK_CODE,BOOK_TITLE,RACK_NUM FROM LMS_BOOK_DETAILS WHERE RACK_NUM='A1'
ORDER BY BOOK_TITLE ASC;

--6-WRITE A QUERY TO DISPLAY THE MEMBER ID,MEMBER NAME,DUE DATE AND DATE RETURNED OF THE MEMBERS WHO HAS
--RETURNED THE BOOKS AFTER THE DUE DATE.HINT:-DATE_RETURN IS DUE DATE AND DATE_RETURNED IS ACTUAL BOOK RETURN

SELECT L1.MEMBER_ID,L1.MEMBER_NAME,L2.DATE_RETURN,L2.DATE_RETURNED FROM LMS_MEMBERS AS L1 JOIN LMS_BOOK_ISSUE AS L2 ON L1.MEMBER_ID=L2.MEMBER_ID;

--7-WRITE A QUERY TO DISPLAY THE MEMBER ID,MEMBER NAME AND DATE OF REGISTRATION WHO HAVE NOT TAKEN ANY BOOK--

SELECT MEMBER_ID,MEMBER_NAME,DATE_REGISTER FROM LMS_MEMBERS WHERE MEMBER_ID NOT IN(SELECT MEMBER_ID FROM LMS_BOOK_ISSUE); 

--8-WRITE A QUERY TO DISPLAY THE MEMBER ID AND MEMBER NAME OF THE MEMBERS WHO HAS NOT PAID ANY FINE IN THE YEAR 2012.

SELECT MEMBER_ID,MEMBER_NAME FROM LMS_MEMBERS WHERE MEMBER_ID IN(SELECT MEMBER_ID FROM LMS_BOOK_ISSUE WHERE YEAR(DATE_RETURNED)=2012 AND FINE_RANGE
IN(SELECT FINE_RANGE FROM LMS_FINE_DETAILS WHERE FINE_AMOUNT=0));  

--9-WRITE A QUERY TO DISPLAY THE DATE ON WHICH THE MAXIMUM NUMBER OF BOOKS WERE ISSUED AND THE NUMBER OF BOOKS ISSUED WITH ALIAS NAME 'NOOFBOOKS'

SELECT * FROM LMS_BOOK_ISSUE;
SELECT COUNT(BOOK_CODE) AS NOOFBOOKS FROM LMS_BOOK_ISSUE WHERE DATE_ISSUE=(SELECT MAX(DATE_ISSUE) FROM LMS_BOOK_ISSUE);

--10-WRITE A QUERY TO LIST THE BOOK_TITILE AND SUPPLIER ID FOR THE BOOK AUTHORISED BY "HERBERT SCHILDT"
--AND THE BOOKK EDITION IS 5 AND SUPPLIED BY SUPPLIER 'S01'

SELECT BOOK_TITLE,SUPPLIER_ID,AUTHOR,BOOK_EDITION FROM LMS_BOOK_DETAILS WHERE AUTHOR='Herbert Schildt' and BOOK_EDITION='5' AND SUPPLIER_ID='S01';

--11-WRITE A QUERY TO DISPLAY THE RACK NUMBER AND THE NUMBER OF BOOKS IN EACH RACK WITH ALIAS NAME 'NOOFBOOKS' AND SORT BY RACKNUMBER IN ASCENDING ORDER.

SELECT RACK_NUM ,COUNT(BOOK_CODE) AS NOOFBOOKS FROM LMS_BOOK_DETAILS GROUP BY RACK_NUM ORDER BY RACK_NUM ASC;

--12-WRITE A QUERY TO DISPLAY BOOK ISSUE NUMBER,MEMBER NAME,DATE OR REGISTERATION,DATE OF EXPIRY,BOOK TITLE,CATEGORY,AUTHOR,PRICE
--DATE OF ISSUE,DATE OF RETURN,ACTUAL DATE RETURNED,ISSUE STATUS AND FINE AMOUNR.

SELECT BOOK_ISSUE_NO,DATE_RETURN,DATE_RETURNED,DATE_ISSUE,MEMBER_NAME,DATE_REGISTER,DATE_EXPIRE,BOOK_TITLE,CATEGORY,AUTHOR,PRICE,FINE_AMOUNT
FROM LMS_BOOK_ISSUE AS L1 JOIN LMS_BOOK_DETAILS AS L2 ON L1.BOOK_CODE=L2.BOOK_CODE JOIN LMS_MEMBERS AS L3 ON L3.MEMBER_ID=L1.MEMBER_ID JOIN
LMS_FINE_DETAILS AS L4 ON L4.FINE_RANGE=L1.FINE_RANGE;

--13-WRITE A QUERY TO DISPLAY THE BOOK CODE,TITLE,PUBLISH DATE OF THE BOOKS WHICH IS BEEN PUBLISHED IN THE MONTH OF DECEMBER

SELECT BOOK_CODE,BOOK_TITLE,PUBLISH_DATE FROM LMS_BOOK_DETAILS WHERE MONTH(PUBLISH_DATE)=12;

--14-WRITE A QUERY TO DISPLAY THE BOOK CODE,BOOK TITLE,SUPPLIER NAME AND PRICE OF THE BOOK WHICH TAKES MAXIMUM PRICE BASED ON EACH SUPPLIER.

SELECT DISTINCT BOOK_CODE,BOOK_TITLE,MAX(PRICE) AS MAXPRICE,L2.SUPPLIER_NAME FROM LMS_BOOK_DETAILS AS L1 JOIN LMS_SUPPLIERS_DETAILS AS L2 ON L1.SUPPLIER_ID=L2.SUPPLIER_ID
 GROUP BY BOOK_CODE,BOOK_TITLE,L2.SUPPLIER_NAME;

SELECT * FROM LMS_MEMBERS;
SELECT * FROM LMS_BOOK_ISSUE;
SELECT * FROM LMS_BOOK_DETAILS;
SELECT * FROM LMS_FINE_DETAILS;
SELECT * FROM LMS_SUPPLIERS_DETAILS;
